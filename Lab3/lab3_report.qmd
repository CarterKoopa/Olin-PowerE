---
title: Power Electronics Lab 3
jupyter: python3
---


## Carter Harris

---

## Pre-Lab Documentation

We completed the board assembly process several weeks ago (on Feb 9th). We used the Lab Hardware Canvas page as reference at this point and were unaware that the Lab 3 Prep assignment was to build the lab hardware. As such, we were unaware that pictures of the assembly process as indicated in the lab prep assignment would be required and do not have any other than that of the final product. Apologies that these therefore won't be included, but I don't think there's much else we can do for further assembly documentation at this point.

Looking back on the process, while I had reflowed a number of boards before, this was Tyler's first time with the process. Because of this, I tried my best to stand back and teach/guide him through the process while allowing him to do a lot of the high-touch areas. Particular skills I helped demonstrate were:
- Taping up a jig to hold/align the board/stencil to apply paste.
- How to determine the polarity of things like LEDs with small or under-part markings.
- How to use the EE Proto room's pick and place machine.
- How to inspect the board to ensure everything reflowed correctly (spoiler alert, it didn't).

Beyond teaching, my individual contributions were in completing the necessary rework on the board after reflowing. In particular, the TLV272 op-amp chip got misaligned somewhere between the pick and place machine and the reflow oven, and was angled such that several pins were not making contact. I realigned this chip alongside soldering several connections that didn't fully melt and set in the reflow oven on passive components.

Tyler and I split the pin socket and header soldering 50-50 between us. I thankfully found some tape to hold on the pin sockets in such that they didn't fall out when flipping over to solder.

Finally, Tyler drilled while I tapped holes to mount the load resistor to the heat sink, and I soldered/heat shrunk/connected the wiring.

Our board worked first try for the actual lab, so I'm willing to call this process a success.

---

## Lab 2, Task 1

All functional tests were passed in this section. After first setting the current limit on the lab bench power supply using an extra load resistor, we began to test all functionality of our assembled lab hardware.

First, power connected to the output verified the functionality of the red output status LED, as shown in the image below.

![Functional test of red output LED](images/task1_red_led.jpg)

(note that while the supply shows 5V in this picture, the current draw was ensured to stay below 10mA up to 18V.)

Next, the circuit was confirmed to have no leakage current when just the input was connected to the power supply and resistor connected to the output (with no jumpers in place).

Finally, JP5 was installed and used to test that the green status LED was correctly installed in place and that no output current beyond 20 mA flowed up to 18V, as shown below.

![JP5 green LED test](images/task1_green_led.jpg)

---

## Task 2

This stage of the lab presented a rather frustrating challenge for our team in testing basic operation with the UC2844. Despite following all instructors, we had extensive difficulty getting any output from the $V_{gate}$ test point. We confirmed numerous jumper positions, visually inspected all component solder connections on our board, ensured $VCC$ and $V_{ref}$ were correctly reaching the IC, confirmed the function of the oscilloscope with the CA's demo board, and troubleshooted extensively with CA Andrew in class. In the end, it ended up being a dead UC2844 chip that cursed our lab, which was tested dead in the known-working CA board, too. Upon replacing the dead UC2844 chip with a new one, our board worked perfectly.

Returning to the lab, jumpers were installed for JP1, JP6, and JP4 in the 2-3 position, after which current was verified to remain under 35mA. A 33 ohm resistor was installed for R12, and the scope probe connected to $V_{gate}$. After setting the trim pot all the way counter-clockwise and supply voltage to 18V, the supply was turned on. The trim pot was turned all the way clockwise, after which the scope measured the following waveform at ${V_gate}$:


```{python}
import matplotlib.pyplot as plt
import pandas as pd
from rigol import read_rigol_csv

[t2_vgate, t2_vgate_t0, t2_vgate_dT] = read_rigol_csv("data/t2_vgate.csv")

t2_vgate.to_csv("data/t2_vgate_processed.csv")

t2_vgate.plot(x = "X", y = "CH1")
plt.ylabel("Gate Voltage (volts)")
plt.xlabel("Time (s)")
plt.ticklabel_format(axis = "x", style = "sci", scilimits=(0,0))
plt.title("Task 2 UC2844 Gate Voltage Output")
plt.xlim(0.00008, 0.000125)
```

#### Q1: Measure the exact frequency, duty cycle, and amplitude of the output.

By using the 'measure all' function on the osciliscope, the measurements are as follows:
- Frequency: 50.0 kHz
- Duty Cycle: 48%
- Amplitude: 16.5V

The scope output is shown below:

![Measure all scope output](images/t2_scope_screenshot.png)

---

## Task 3

After setting an 18V supply and 1.5A current limit on the lab bench power supply, a FDP61N20 transistor was installed for Q1, a SB350 diode installed for D7, and the test inductor provided was installed in its respective spot. JP7 was set to the "buck" operating mode.

#### Q2: Make note of the inductor provided.
Our lab group used inductor #5.



The configuration used is shown in the below images.

![Buck converter configuration top](images/t3_top.jpg)
![Buck converter configuration bottom](images/t3_bottom.jpg)

Scope probes were then attached to the $V_{sh}$ and $V_{drain}$ test points, alongside having a DMM connected to the output. With the trim pot remaining turned all the way clockwise from the previous task, the measured outputs and lab configuration are shown below:

![Buck converter configuration with all measuring hardware connected](images/t3_setup.jpg)

The trim pot was then used to set the output voltage to approximately 4V, measured by the DMM to be 4.034V. The resulting output measurements for $V_{sh}$ and $V_{drain}$ are shown below.

```{python}
[t3_4, t3_t0_4, t3_dT_4] = read_rigol_csv("data/t3_4.csv")

fig, ax1 = plt.subplots()

ax1.set_xlabel("Time (s)")
ax1.set_xlim(-1e-5, 2.5e-5)
ax1.set_ylabel("Shunt Voltage (V)")
ax1.plot(t3_4["X"], t3_4["CH1"], label="Shunt Voltage")

ax2 = ax1.twinx()

ax2.set_ylabel("Drain Voltage (V)")
ax2.plot(t3_4["X"], t3_4["CH2"], color = 'tab:orange', label="Drain Voltage")

plt.title("Shunt & Drain Voltage with 4V Output")
fig.legend()
fig.tight_layout()
```

The same process was completed for an ideal output voltage of 7V, logged to an actual output voltage of 6.99V. The output figures are shown below.

```{python}
[t3_7, t3_t0_7, t3_dT_7] = read_rigol_csv("data/t3_7.csv")

fig, ax1 = plt.subplots()

ax1.set_xlabel("Time (s)")
ax1.set_xlim(-2e-5, 1e-5)
ax1.set_ylabel("Shunt Voltage (V)")
ax1.plot(t3_7["X"], t3_7["CH1"], label="Shunt Voltage")

ax2 = ax1.twinx()

ax2.set_ylabel("Drain Voltage (V)")
ax2.plot(t3_7["X"], t3_7["CH2"], color = 'tab:orange', label="Drain Voltage")

plt.title("Shunt & Drain Voltage with 7V Output")
fig.legend()
fig.tight_layout()
```

And finally, the same process was completed with a desired 9V output, measured to actually be 8.96V. The output plots are:

```{python}
[t3_9, t3_t0_9, t3_dT_9] = read_rigol_csv("data/t3_9.csv")

fig, ax1 = plt.subplots()

ax1.set_xlabel("Time (s)")
ax1.set_xlim(-2.5e-5, 0.25e-5)
ax1.set_ylabel("Shunt Voltage (V)")
ax1.plot(t3_9["X"], t3_9["CH1"], label="Shunt Voltage")

ax2 = ax1.twinx()

ax2.set_ylabel("Drain Voltage (V)")
ax2.plot(t3_9["X"], t3_9["CH2"], color = 'tab:orange', label="Drain Voltage")

plt.title("Shunt & Drain Voltage with 9V Output")
fig.legend()
fig.tight_layout()
```

---

## Task 4

Next, the same process as in task 3 was completed to measure the gate drive output voltage $V_{gdr}$ and gate voltage $V_{gate}$.

First, for the 4V desired output, the DMM measured a 4.094V output, as the scope readings are shown below. The scope measured the output duty cycle as 14%.

```{python}
[t4_4, t4_t0_4, t4_dT_4] = read_rigol_csv("data/t4_4.csv")

fig, ax1 = plt.subplots()

ax1.set_xlabel("Time (s)")
ax1.set_xlim(-2.5e-5, -1e-5)
ax1.set_ylabel("Gate Driver Voltage (V)")
ax1.plot(t4_4["X"], t4_4["CH1"], label="Vgdr")

ax2 = ax1.twinx()

ax2.set_ylabel("Gate Voltage (V)")
ax2.plot(t4_4["X"], t4_4["CH2"], color = 'tab:orange', label="Vgate")

plt.title("Gate & Gate Driver Voltage with 4V Output")
fig.legend()
plt.tight_layout()
```

The same was completed for a 7V output, measured to actually be 7.09V. The scope measured the duty cycle at 28%.

```{python}
[t4_7, t4_t0_7, t4_dT_7] = read_rigol_csv("data/t4_7.csv")

fig, ax1 = plt.subplots()

ax1.set_xlabel("Time (s)")
ax1.set_xlim(-2.5e-5, 0.25e-5)
ax1.set_ylabel("Gate Driver Voltage (V)")
ax1.plot(t4_7["X"], t4_7["CH1"], label="Vgdr")

ax2 = ax1.twinx()

ax2.set_ylabel("Gate Voltage (V)")
ax2.plot(t4_7["X"], t4_7["CH2"], color = 'tab:orange', label="Vgate")

plt.title("Gate & Gate Driver Voltage with 7V Output")
fig.legend()
plt.tight_layout()
```

And finally, for a 9V output, with a measured actual output of 8.96 volts. The scope measured the duty cycle at 39%.

```{python}
[t4_9, t4_t0_9, t4_dT_9] = read_rigol_csv("data/t4_9.csv")

fig, ax1 = plt.subplots()

ax1.set_xlabel("Time (s)")
ax1.set_xlim(-2.5e-5, 0.25e-5)
ax1.set_ylabel("Gate Driver Voltage (V)")
ax1.plot(t4_9["X"], t4_9["CH1"], label="Vgdr")

ax2 = ax1.twinx()

ax2.set_ylabel("Gate Voltage (V)")
ax2.plot(t4_9["X"], t4_9["CH2"], color = 'tab:orange', label="Vgate")

plt.title("Gate & Gate Driver Voltage with 9V Output")
fig.legend()
plt.tight_layout()
```

---

## Post-Lab Questions

#### Q3: Use the measurements taken to determine the inductance value of the test inductor.

The following math will use the data collected in the final section of Task 4 based upon a 9V output. 

Looking at the gate voltage using the oscilliscope with the same setup as Task 4, the period of the transistor's operation is measured to be approximately 50 kHz. This equates to a period of $ 20 \mu S $. The duty cycle, as measured from the scope, is 39%.

As we have a 18V input and 8.96V volt output, the voltage conversion ratio is equal to $M = \frac{8.96}{18} = 50\%$. As the duty cycle and the output voltage are not equal, the buck converter must be operating in DCM mode. As such, the DCM duty cycle equation can be used backwards to calculate the $K$ constant, from which the inductance can be calculated.

$ D_{DCM} = \sqrt{K} \cdot \sqrt{\frac{1}{1 - M}} \cdot M = \sqrt{K} \cdot \sqrt{\frac{1}{1 - 0.5}} \cdot 0.5 = 0.707\sqrt{K} $

$ 0.41 = 0.707\sqrt{K} $, which calculates out to $ K = 0.336 $.

Given the definition of K, $ K = \frac{2}{T_s} \cdot \frac{L}{R} $ and the $5 \Omega $ resistance of our load resistor, all known information can be substituted in:

$0.336 = \frac{2}{20e-6} \cdot \frac{L}{5} $, which can be solved algebraically for $ L = 16.8 \mu H$

#### Q4: Update the digital twin model with the inductance value and measured switching frequency.
The simulation parameters can be updated as follows:
- The $ 16.8 \mu H$ inductor
- A $5 \Omega $ load resistance
- A 50 kHz switching frequency
- A capacitance of $88 \mu F$, based upon having 4, $22 \mu F $ capacitors in parallel in the lab hardware.
- Vg = 18 volts
- V = 9 volts. For the following calculations, a desired output voltage of 8.96 volts will be used to mirror the data collected in the final part of the lab. This voltage will be used to calculate $I_{pk}$ and the corresponding $V_{comp}$ to control the UC2844 in simulation.

When set with all matching parameters, the digital twin outputs a slightly lower output voltage of 8.72 volts compared to the 8.96 volts of the lab hardware.

The complete initialization script is shown below:

```{python}
fs = 50e3;
Ts = 1/fs;

R = 5;
C = 88e-6;
L = 16.8e-6;

Vg = 18;
V = 8.96;

L_crit = 29.6e-6
alpha = L/L_crit;

D = 0;

K = (2/Ts)*(L/R)
M = V/Vg;

Ipk = sqrt(K) * sqrt(1 - M) * Ts * (V/L);

Vcomp = (3/20)*Ipk + (13/10)
```

#### Q5: Run simulations corresponding to the measurements taken during Task 3 and compare the waveforms (shape, amplitude, timing, duty cycle) of the shunt voltage and drain voltage.

The simulation results are as follows:

![Simulation output of shunt and drain voltage](images/post_q5_model.png)

Datapoints of note from this plot include:
- **Shunt Voltage**
    - Shape: The shunt voltage is a perfect sawtooth wave, aside from the gaps between "teeth" off-cycle.
    - Amplitude: The sawtooth peaks at 0.219 volts
    - Timing: The voltage begins increasing as the transistor turns off and drops to zero as the transistor turns on.
    - Duty Cycle: 40%
- **Drain Voltage**
    - Shape: A square-like wave with three distinct voltage levels that oscillate sequentially from high to low.
    - Amplitude: 18V at the highest level, 9.28V at the mid level, and around 0.16V for the low voltage.
    - Timing: The high level peak turn-on occurs at the peak of the shunt voltage.
    - Duty Cycle: 40%

To re-plot the lab measured data both overlaid and separate:

```{python}
fig, ax1 = plt.subplots()

ax1.set_xlabel("Time (s)")
ax1.set_xlim(-2e-5, 1e-5)
ax1.set_ylabel("Shunt Voltage (V)")
ax1.plot(t3_9["X"], t3_9["CH1"], label="Shunt Voltage")

ax2 = ax1.twinx()

ax2.set_ylabel("Drain Voltage (V)")
ax2.plot(t3_9["X"], t3_9["CH2"], color = 'tab:orange', label="Drain Voltage")
fig.legend()
fig.tight_layout()

plt.figure()
plt.subplot(2, 1, 1)
plt.plot(t3_9["X"], t3_9["CH1"])
plt.xlabel("Time (s)")
plt.ylabel("Vsh (V)")

plt.subplot(2, 1, 2)
plt.plot(t3_9["X"], t3_9["CH2"])
plt.xlabel("Time (s)")
plt.ylabel("Vdr (V)")

plt.tight_layout()
```

Datapoints of interest from this graph and comparisons:

- **Shunt Voltage**
    - Shape: The same sawtooth shape is apparent, however, there are large +/- voltage oscillations at both the start and the end of the sawtooth.
    - Amplitude: The sawtooth, ignoring the large oscillations, peaks at 0.252 volts. This peak is slightly higher than the simulation peak of 0.219 volts, alluding to an overall higher peak current across the shunt resistor.
    - Timing: The shunt voltage shows the same timing behavior as the simulation. The shunt voltage begins increasing as the drain voltage drops to zero (the transistor turns off) and peaks as the transistor turns back on (drain voltage jumps back up).
    - Duty Cycle: The duty cycle as measured by the scope was 39%, approximately equal to that of the simulation, 40%.
- **Drain Voltage**
    - Shape: The waveform retains its three distinct region. The first "high" level voltage, resembling a square wave, remains fairly similar, except for the large voltage spike at the transistor turn on. The middle region varies the most from the simulation - instead of another relatively constant voltage level, the lab hardware drain voltage oscillates about around a midpoint slightly higher than that of the constant voltage seen in the simulation. Finally, the waveform returns to the same low "off" voltage near zero.
    - Amplitude: 18.2 volts at the high level, which approximately matches that of the simulation. The oscillations of the mid voltage level average to about 9.5 volts.
    - Timing: See above for the shunt resistor timing, but the timing of the drain voltages matches that of the simulation, aside from the noise discussed in the shape section.
    - Duty Cycle: The duty cycle as measured by the scope is 39.5%, approximately equal to that of the simulation, 40%.

Overall, the waveforms between the simulation and the actual lab hardware are very similar. The duty cycle and timing are pretty much close to identical. While the general form of the shape is similar, there is quite a bit more noise and oscillation observed in the actual lab hardware, as would be expected with real-world non-ideal components. The notable differences are the oscillation visible in the drain voltage and the spikes that are apparent in each waveform when the transistor switches. Finally, the amplitude is slightly higher. This difference accounts for the higher power draw of the converter than will be required to reach the same voltage when using non-ideal dissipative components.  

#### Q6: Are the simplifying assumptions made in our theoretical study of the inductor valid?

Like all applications, it depends. By and large, the assumptions made in our theoretical study of the inductor were valid. While there are some differences in the exact output voltage of the buck converter, this difference is to be expected when using ideal vs. non-ideal components, and the behavior was as-modeled. Further, while there were some interesting voltage spikes and oscillations, the duty cycle and overall function of the buck converter remained the same. Whether these deviations are acceptable comes back to the "it depends" part and would be determined by the application and the sensitivity of the components your power electronics are powering. 


#### Q7: Does the measured peak current and duty cycle match the theoretical predictions?
The measured peak current of the lab hardware can be calculated based on the shunt resistance ($0.05 \Omega$) and Ohm's Law, such that $ I = \frac{V}{R} = \frac{0.252}{0.05} = 5.04 $ amps. The peak current calculated in simulation is 4.4 amps. While these two values don't exactly match, this roughly 10% difference can fairly easily be explained by the non-ideal real-world efficiency of our buck converter, where 90% is a fairly reasonable efficiency for a well-designed buck converter.

The duty cycle does match the theoretical predictions which both being roughly 40%.

#### Q8: Plot the gate voltage and gate current during MOSFET turn-on and turn-off for the output voltages 4V, 7V, and 9V.

```{python}
plt.figure()

# Shift to align timescales
t4_4["X"] = t4_4["X"] - 0.35e-5
t4_9["X"] = t4_9["X"] - 0.35e-5

max_voltage_4 = t4_4["CH1"].max()
max_voltage_7 = t4_7["CH1"].max()
max_voltage_9 = t4_9["CH1"].max()
print(f"Maximum gate voltage for 4V output: {max_voltage_4}")
print(f"Maximum gate voltage for 7V output: {max_voltage_7}")
print(f"Maximum gate voltage for 9V output: {max_voltage_9}")


plt.plot(t4_4["X"], t4_4["CH2"], label="4V Output")
plt.plot(t4_7["X"], t4_7["CH2"], label="7V Output")
plt.plot(t4_9["X"], t4_9["CH2"], label="9V Output")
plt.legend()
plt.title("Gate Voltages by Output Voltage")
plt.xlabel("Time (s)")
plt.ylabel("Vgate (V)")
```

Based upon the measured gate driver and gate voltages, the voltage drop across the gate resistor (R12, $33 \Omega$) can be extrapolated. Based upon this voltage, Ohm's law can be used to calculate the current through this resistor and subsequently through the gate (considering R14 negligible with its large $100k \Omega$ resistance.)

```{python}
t4_4["I"] = (t4_4["CH2"] - t4_4["CH1"]) / 33
t4_7["I"] = (t4_7["CH2"] - t4_7["CH1"]) / 33
t4_9["I"] = (t4_9["CH2"] - t4_9["CH1"]) / 33

max_current_4 = t4_4["I"].max()
max_current_7 = t4_7["I"].max()
max_current_9 = t4_9["I"].max()
print(f"Max current for 4V output: {max_current_4}")
print(f"Max current for 7V output: {max_current_7}")
print(f"Max current for 9V output: {max_current_9}")

plt.figure()
plt.plot(t4_4["X"], t4_4["I"], label="4V Output")
plt.plot(t4_7["X"], t4_7["I"], label="7V Output")
plt.plot(t4_9["X"], t4_9["I"], label="9V Output")
plt.legend()
plt.title("Gate Current by Output Voltage")
plt.xlabel("Time (s)")
plt.ylabel("Gate Current (amps)")
```

As shown above, the current peaks at a value of around +/- 0.36 amps.

#### Q9: Are we respecting the maximum allowable gate voltage for the MOSFET?
For a reminder, the MOSFET being used is a FDP61N20 N-Channel MOSFET. As shown in the above question, the maximum gate voltage is 18.3V. According to the FDP61N20 datasheet, the maximum gate to source voltage is $\pm 30V$. As the gate voltage above is taken relative to the circuit ground, and the MOSFET source is tied to ground, this rating should never be exceeded and is being respected.

#### Q10: Are we respecting the maximum allowable output current of the UC2844?
According to the calculations preformed in question 9, the maximum gate current, which neglecting R14 as described in Q9 be equal to the maximum gate current, is 0.36 amps. According to the UC2844's datasheet, the maximum output drive current $I_{output}$ is $\pm 1$ amp. As our current is below this rating, the maximum allowable output current is being respected.

